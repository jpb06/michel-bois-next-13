// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// Auth realm

model Account {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid

  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(uuid()) @db.Uuid

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  Comment  Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Assets realm

model Asset {
  id String @id @default(uuid()) @db.Uuid

  documentKey        String
  placeholderDataUri String
  month              Int?
  year               Int?
  name               String
  description        String?
  width              Int
  height             Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Comment Comment[]
}

model JoinAssetTag {
  idAsset String @db.Uuid
  idTag   String @db.Uuid

  @@id([idAsset, idTag])
}

model Tag {
  id String @id @default(uuid()) @db.Uuid

  name String
}

model Comment {
  id String @id @default(uuid()) @db.Uuid

  idAsset String @db.Uuid
  idUser  String @db.Uuid

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  asset Asset @relation(fields: [idAsset], references: [id])
  user  User  @relation(fields: [idUser], references: [id])
}
